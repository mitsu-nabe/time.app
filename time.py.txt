<<<<<<< HEAD
【機能と処理】_要はイテレーションのことか
(a) スレッドでカウントダウンの処理を行う
(b) 分と秒を設定できるようにする
(c) START/STOPボタンでカウントダウンの開始/停止
(d) 0になったらメッセージボックスを表示

【イテレーション】
イテレーション１
	・カウントダウン
イテレーション２
	・各ウィジェット
イテレーション３
	→それらを組み合わせ、仕上げ

【関数】
「timeモジュール」
「threadingモジュール」
Timer関数_カウントダウン

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
(a）【 スレッドでカウントダウンの処理を行う】
	→カウントダウンのプログラム

①timer.py
→1秒ごとに時間をカウントダウン処理
「sleep関数」引数に指定した秒数だけ、プログラムを停止できる。
countdown

②timer_desktop.py
while True:　「無限ループ」_1回のループで-1するからカウントダウン
mainloop関数で動き始めるメインループがGUIに関する処理を担当するので、
このメインループと並列的に動くスレッドを作り、そのスレッドにカウントダウンの処理を担当させる
update関数：ウィジェットへの変更を即座に反映させることが出来て、GUIが固まりにくくなる

③timer_threading.py
標準ライブラリにある「threadingモジュール」
	→モジュールを知りたかったら、公式ドキュメント or　helpしてみる（コマンドプロンプト）
timer関数：
>> 使い方
①Timer関数の第1引数には待ち時間である「秒数」を
②第2引数にはメインループとは独立したスレッドで実行したい「関数」を指定します。
③その後、生成したTimerオブジェクトの「start関数」を実行します。

cancel関数：
countdown関数でかカウントダウンが終了したら、timerオブジェクトの「cancel関数」を実行して、
timer関数によるスレッドの実行を停止する。

【なるほどメモ】
def：Pythonにおける関数（function）を定義するためのキーワード
function（関数）とは：「一連の処理に名前をつけて、まとめたもの」
>> 例：「卵焼きを作る」
・フライパンを温める
・卵を溶く
・焼く
・巻く
・出来上がり！
これらの処理を「make_egg_roll()」という名前にまとめておき、
あとから何回でもその手順を呼び出せるということ！

④timer_A.py
after関数：指定の関数を指定の時間後に実行できる。
	→ timer_threading.pyの内容とafter関数で作成している

□ボタンの無効化と有効化
無効化：Buttonウィジェットの「state属性」に「tkinter.DISABLED」を設定することで行う。
有効化：state属性に「tkinter.NORMAL」を設定する。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
(b) 【分と秒を設定できるようにする】
	→

【ウィジェット】
Labelウィジェット x 2個
Buttonウィジェット x 2個
Scaleウィジェット x 2個
Spinboxウィジェット X 2個
Progressbar x 1個

〇Scale関数_Scaleウィジェット
「スライドバー」「スライダー」

①scale.py
ウィジェット変数のvar_1を、Labelウィジェットのtextvarible属性とscaleウィジェットのvariable属性に設定することにより、
LabelウィジェットとScaleウィジェットを連動させることができる。

②spinbox.py
ボタンを押すと、連動してLabelウィジェットの表示も変わる。
ウィジェット変数を使って、LabelウィジェットとSpinboxウィジェットを連動させている。

③progressbar_01.py
after関数を使って、変数countの値を1秒ごとに-1している。
ウィジェット変数をprogressbarウィジェットに設定し、countの値をウィジェット変数に設定している。
こうすることで、countの値とProgressbarウィジェットが連動することになり、countの値が減るとバーの長さも短くなる。
※実行できても、動作が起こらないとどこにエラーがあるか難易度が上がる

④progressbar_02.py
Progressbar関数 ← 「modeオプション」 ← 'indeterminate' 設定
→start関数を実行すると、アニメーション表示になる

⑤countdown_app.py


【2章まとめ】
・GUIが固まらないようにスレッドを使う。
=======
【機能と処理】_要はイテレーションのことか
(a) スレッドでカウントダウンの処理を行う
(b) 分と秒を設定できるようにする
(c) START/STOPボタンでカウントダウンの開始/停止
(d) 0になったらメッセージボックスを表示

【イテレーション】
イテレーション１
	・カウントダウン
イテレーション２
	・各ウィジェット
イテレーション３
	→それらを組み合わせ、仕上げ

【関数】
「timeモジュール」
「threadingモジュール」
Timer関数_カウントダウン

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
(a）【 スレッドでカウントダウンの処理を行う】
	→カウントダウンのプログラム

①timer.py
→1秒ごとに時間をカウントダウン処理
「sleep関数」引数に指定した秒数だけ、プログラムを停止できる。
countdown

②timer_desktop.py
while True:　「無限ループ」_1回のループで-1するからカウントダウン
mainloop関数で動き始めるメインループがGUIに関する処理を担当するので、
このメインループと並列的に動くスレッドを作り、そのスレッドにカウントダウンの処理を担当させる
update関数：ウィジェットへの変更を即座に反映させることが出来て、GUIが固まりにくくなる

③timer_threading.py
標準ライブラリにある「threadingモジュール」
	→モジュールを知りたかったら、公式ドキュメント or　helpしてみる（コマンドプロンプト）
timer関数：
>> 使い方
①Timer関数の第1引数には待ち時間である「秒数」を
②第2引数にはメインループとは独立したスレッドで実行したい「関数」を指定します。
③その後、生成したTimerオブジェクトの「start関数」を実行します。

cancel関数：
countdown関数でかカウントダウンが終了したら、timerオブジェクトの「cancel関数」を実行して、
timer関数によるスレッドの実行を停止する。

【なるほどメモ】
def：Pythonにおける関数（function）を定義するためのキーワード
function（関数）とは：「一連の処理に名前をつけて、まとめたもの」
>> 例：「卵焼きを作る」
・フライパンを温める
・卵を溶く
・焼く
・巻く
・出来上がり！
これらの処理を「make_egg_roll()」という名前にまとめておき、
あとから何回でもその手順を呼び出せるということ！

④timer_A.py
after関数：指定の関数を指定の時間後に実行できる。
	→ timer_threading.pyの内容とafter関数で作成している

□ボタンの無効化と有効化
無効化：Buttonウィジェットの「state属性」に「tkinter.DISABLED」を設定することで行う。
有効化：state属性に「tkinter.NORMAL」を設定する。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
(b) 【分と秒を設定できるようにする】
	→

【ウィジェット】
Labelウィジェット x 2個
Buttonウィジェット x 2個
Scaleウィジェット x 2個
Spinboxウィジェット X 2個
Progressbar x 1個

〇Scale関数_Scaleウィジェット
「スライドバー」「スライダー」

①scale.py
ウィジェット変数のvar_1を、Labelウィジェットのtextvarible属性とscaleウィジェットのvariable属性に設定することにより、
LabelウィジェットとScaleウィジェットを連動させることができる。

②spinbox.py
ボタンを押すと、連動してLabelウィジェットの表示も変わる。
ウィジェット変数を使って、LabelウィジェットとSpinboxウィジェットを連動させている。

③progressbar_01.py
after関数を使って、変数countの値を1秒ごとに-1している。
ウィジェット変数をprogressbarウィジェットに設定し、countの値をウィジェット変数に設定している。
こうすることで、countの値とProgressbarウィジェットが連動することになり、countの値が減るとバーの長さも短くなる。
※実行できても、動作が起こらないとどこにエラーがあるか難易度が上がる

④progressbar_02.py
Progressbar関数 ← 「modeオプション」 ← 'indeterminate' 設定
→start関数を実行すると、アニメーション表示になる

⑤countdown_app.py


【2章まとめ】
・GUIが固まらないようにスレッドを使う。
>>>>>>> origin/main
・ウィジェット変数を使うことで、複数のウィジェットを連動させる。